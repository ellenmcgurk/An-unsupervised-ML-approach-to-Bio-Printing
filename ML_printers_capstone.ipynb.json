{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ML Model for 3D Printers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This model is created based on the capability of PVA-GO materials as inputs for 3D printers.\n",
    "\n",
    "Firstly, we will explore the dataset and get some metrics that will help us for the further analysis.\n",
    "\n",
    "Secondly, we will deploy a Machine Learning model to explore the efficiency of PVA-GO as material for 3D printers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Import of requiere libraries\n",
    "\n",
    "# Data handling\n",
    "import scipy\n",
    "from scipy import stats\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "# Visualization\n",
    "import seaborn as sns\n",
    "\n",
    "#import plotly.express as px\n",
    "import matplotlib.pyplot as plt\n",
    "import mpl_toolkits.mplot3d.axes3d as p3\n",
    "from matplotlib import animation\n",
    "import matplotlib.patches as mpatches\n",
    "\n",
    "%matplotlib inline \n",
    "\n",
    "# sklearn\n",
    "from sklearn.datasets import load_boston, load_breast_cancer, load_iris\n",
    "from sklearn.linear_model import LinearRegression, LogisticRegression, Perceptron, Ridge\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "\n",
    "# Clustering\n",
    "from sklearn.cluster import KMeans, DBSCAN\n",
    "from sklearn import preprocessing\n",
    "from sklearn.metrics import silhouette_score\n",
    "\n",
    "# Dimensionality reduction\n",
    "from sklearn.manifold import TSNE\n",
    "from sklearn.decomposition import PCA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1. Data Upload "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 470,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Upload the Dataset\n",
    "\n",
    "data = pd.read_csv(\"Factorial_study_data.csv\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 471,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2213, 44)"
      ]
     },
     "execution_count": 471,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 472,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Label                        object\n",
       "Layer #                     float64\n",
       "Scaffold #                  float64\n",
       "wt% PPF                     float64\n",
       "Spacing (mm)                float64\n",
       "Speed (mm/s)                float64\n",
       "Pressure (bar)              float64\n",
       "Mean fiber                  float64\n",
       "Mean pore                   float64\n",
       "Mean spacing                float64\n",
       "Fiber Size (x1)             float64\n",
       "x2                          float64\n",
       "x3                          float64\n",
       "x4                          float64\n",
       "x5                          float64\n",
       "Pore Size (x1)              float64\n",
       "x2 2                        float64\n",
       "x3 2                        float64\n",
       "x4 2                        float64\n",
       "x5 2                        float64\n",
       "Fiber spacing (x1)          float64\n",
       "Spacing x2                  float64\n",
       "Spacing x3                  float64\n",
       "Spacing x4                  float64\n",
       "Spacing x5                  float64\n",
       "Std wt% PPF                 float64\n",
       "Std Spacing (mm)            float64\n",
       "Std Speed (mm/s)            float64\n",
       "Std Pressure (bar)          float64\n",
       "Std Mean fiber              float64\n",
       "Std Mean pore               float64\n",
       "Std Mean spacing            float64\n",
       "Linear pore size            float64\n",
       "Quadratic pore size         float64\n",
       "Linear fiber diameter       float64\n",
       "Quadratic fiber diameter    float64\n",
       "4th order pore              float64\n",
       "4th order fiber             float64\n",
       "Pore (lin, step)            float64\n",
       "Fiber (lin, step)           float64\n",
       "Pore (quad, step)           float64\n",
       "Fiber (quad, step)          float64\n",
       "Sum (lin, step)             float64\n",
       "Sum (quad, step)            float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 472,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We change the type of data for the headers of the different combinations of experiments. Since the combinations of experiments are labels related to acknowledge them, if we keep them as 'int' the model will assume that they are results of the experiment instead of a description."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Label              object\n",
       "Layer #            object\n",
       "Scaffold #         object\n",
       "wt% PPF            object\n",
       "Spacing (mm)       object\n",
       "Speed (mm/s)       object\n",
       "Pressure (bar)     object\n",
       "Mean fiber        float64\n",
       "Mean pore         float64\n",
       "Mean spacing      float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 473,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "to_string = ['Layer #', 'Scaffold #', 'wt% PPF', 'Spacing (mm)', 'Speed (mm/s)', 'Pressure (bar)']\n",
    "\n",
    "data[to_string] = data[to_string].astype(object)\n",
    "\n",
    "data.dtypes[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the Label column, since it has the same information as the other ones.\n",
    "\n",
    "data = data.drop(['Label'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 475,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Layer', 'Scaffold', 'Material', 'Spacing (mm)', 'Speed (mm/s)',\n",
       "       'Pressure (bar)', 'Mean fiber', 'Mean pore', 'Mean spacing',\n",
       "       'Fiber Size (x1)', 'x2', 'x3', 'x4', 'x5', 'Pore Size (x1)', 'x2 2',\n",
       "       'x3 2', 'x4 2', 'x5 2', 'Fiber spacing (x1)', 'Spacing x2',\n",
       "       'Spacing x3', 'Spacing x4', 'Spacing x5', 'Std wt% PPF',\n",
       "       'Std Spacing (mm)', 'Std Speed (mm/s)', 'Std Pressure (bar)',\n",
       "       'Std Mean fiber', 'Std Mean pore', 'Std Mean spacing',\n",
       "       'Linear pore size', 'Quadratic pore size', 'Linear fiber diameter',\n",
       "       'Quadratic fiber diameter', '4th order pore', '4th order fiber',\n",
       "       'Pore (lin, step)', 'Fiber (lin, step)', 'Pore (quad, step)',\n",
       "       'Fiber (quad, step)', 'Sum (lin, step)', 'Sum (quad, step)'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 475,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data.rename(columns={'Layer #':'Layer', 'Scaffold #':'Scaffold', 'wt% PPF':'Material'})\n",
    "data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2 Data Processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Split the dataset according to each material for analysis of NaN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.1. Material composition 85"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 476,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1440, 43)"
      ]
     },
     "execution_count": 476,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Material Composition --> 85\n",
    "\n",
    "data_85 = data[data['Material']==85]\n",
    "data_85.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 477,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mean fiber            157\n",
       "Mean pore             107\n",
       "Mean spacing          162\n",
       "Fiber Size (x1)       157\n",
       "x2                    157\n",
       "x3                    157\n",
       "x4                    157\n",
       "x5                    157\n",
       "Pore Size (x1)        107\n",
       "x2 2                  107\n",
       "x3 2                  107\n",
       "x4 2                  107\n",
       "x5 2                  107\n",
       "Fiber spacing (x1)    162\n",
       "Spacing x2            162\n",
       "Spacing x3            162\n",
       "Spacing x4            162\n",
       "Spacing x5            162\n",
       "Std Mean fiber        157\n",
       "Std Mean pore         107\n",
       "Std Mean spacing      162\n",
       "dtype: int64"
      ]
     },
     "execution_count": 477,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Missing Values analysis\n",
    "\n",
    "missing_values_85 = data_85.isnull().sum()\n",
    "missing_values_85[missing_values_85>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 478,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8875"
      ]
     },
     "execution_count": 478,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data_85.dropna())/len(data_85)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 479,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9256944444444445"
      ]
     },
     "execution_count": 479,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#If we delete all the null data in fiber spacing are we deleting everything?\n",
    "\n",
    "_data_85_no_nulls = data_85.dropna(subset=['Mean pore'])\n",
    "\n",
    "len(_data_85_no_nulls)/len(data_85)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 480,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "We have 107 empty rows that are explaines by the Mean Pore metric\n"
     ]
    }
   ],
   "source": [
    "print('We have', data_85.shape[0] - _data_85_no_nulls.shape[0], 'empty rows that are explaines by the Mean Pore metric')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We got the 92,5% of our null values explained by the variable 'Mean Pore'. Since the rest of the null values explained by this one, we will explore which combination generates no data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 481,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Layer</th>\n",
       "      <th>Scaffold</th>\n",
       "      <th>Material</th>\n",
       "      <th>Spacing (mm)</th>\n",
       "      <th>Speed (mm/s)</th>\n",
       "      <th>Pressure (bar)</th>\n",
       "      <th>Mean fiber</th>\n",
       "      <th>Mean pore</th>\n",
       "      <th>Mean spacing</th>\n",
       "      <th>Fiber Size (x1)</th>\n",
       "      <th>...</th>\n",
       "      <th>Linear fiber diameter</th>\n",
       "      <th>Quadratic fiber diameter</th>\n",
       "      <th>4th order pore</th>\n",
       "      <th>4th order fiber</th>\n",
       "      <th>Pore (lin, step)</th>\n",
       "      <th>Fiber (lin, step)</th>\n",
       "      <th>Pore (quad, step)</th>\n",
       "      <th>Fiber (quad, step)</th>\n",
       "      <th>Sum (lin, step)</th>\n",
       "      <th>Sum (quad, step)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>107.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "      <td>107.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>20.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>21.0</td>\n",
       "      <td>31.0</td>\n",
       "      <td>107.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.336240</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.367200</td>\n",
       "      <td>...</td>\n",
       "      <td>0.420827</td>\n",
       "      <td>0.487189</td>\n",
       "      <td>0.493501</td>\n",
       "      <td>0.522486</td>\n",
       "      <td>0.533869</td>\n",
       "      <td>0.488288</td>\n",
       "      <td>0.525075</td>\n",
       "      <td>0.496932</td>\n",
       "      <td>1.022158</td>\n",
       "      <td>1.022008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.062825</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.086184</td>\n",
       "      <td>...</td>\n",
       "      <td>0.084744</td>\n",
       "      <td>0.028932</td>\n",
       "      <td>0.191815</td>\n",
       "      <td>0.073041</td>\n",
       "      <td>0.189730</td>\n",
       "      <td>0.068672</td>\n",
       "      <td>0.161540</td>\n",
       "      <td>0.034130</td>\n",
       "      <td>0.158887</td>\n",
       "      <td>0.154531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.261000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.216000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.340674</td>\n",
       "      <td>0.378253</td>\n",
       "      <td>0.153095</td>\n",
       "      <td>0.442717</td>\n",
       "      <td>0.193197</td>\n",
       "      <td>0.397382</td>\n",
       "      <td>0.231661</td>\n",
       "      <td>0.396499</td>\n",
       "      <td>0.755634</td>\n",
       "      <td>0.762601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.306000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.378000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.340674</td>\n",
       "      <td>0.476676</td>\n",
       "      <td>0.353778</td>\n",
       "      <td>0.451495</td>\n",
       "      <td>0.403706</td>\n",
       "      <td>0.431560</td>\n",
       "      <td>0.440208</td>\n",
       "      <td>0.469117</td>\n",
       "      <td>0.957205</td>\n",
       "      <td>0.954084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.329400</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.405000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.354341</td>\n",
       "      <td>0.476676</td>\n",
       "      <td>0.520377</td>\n",
       "      <td>0.479828</td>\n",
       "      <td>0.560213</td>\n",
       "      <td>0.455247</td>\n",
       "      <td>0.516553</td>\n",
       "      <td>0.497368</td>\n",
       "      <td>0.974683</td>\n",
       "      <td>0.985670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.354600</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.414000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.511820</td>\n",
       "      <td>0.498659</td>\n",
       "      <td>0.672000</td>\n",
       "      <td>0.600025</td>\n",
       "      <td>0.690976</td>\n",
       "      <td>0.553499</td>\n",
       "      <td>0.688885</td>\n",
       "      <td>0.513876</td>\n",
       "      <td>1.176482</td>\n",
       "      <td>1.169006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.430200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.423000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.553997</td>\n",
       "      <td>0.553269</td>\n",
       "      <td>0.721060</td>\n",
       "      <td>0.600025</td>\n",
       "      <td>0.762173</td>\n",
       "      <td>0.578217</td>\n",
       "      <td>0.745886</td>\n",
       "      <td>0.562208</td>\n",
       "      <td>1.193733</td>\n",
       "      <td>1.186254</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Layer  Scaffold  Material  Spacing (mm)  Speed (mm/s)  Pressure (bar)  \\\n",
       "count   107.0     107.0     107.0         107.0         107.0           107.0   \n",
       "unique    9.0       4.0       1.0           3.0           4.0             3.0   \n",
       "top       9.0       4.0      85.0           1.2          20.0             2.5   \n",
       "freq     21.0      31.0     107.0          49.0          51.0            52.0   \n",
       "mean      NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "std       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "min       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "25%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "50%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "75%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "max       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "\n",
       "        Mean fiber  Mean pore  Mean spacing  Fiber Size (x1)  ...  \\\n",
       "count     5.000000        0.0           0.0         5.000000  ...   \n",
       "unique         NaN        NaN           NaN              NaN  ...   \n",
       "top            NaN        NaN           NaN              NaN  ...   \n",
       "freq           NaN        NaN           NaN              NaN  ...   \n",
       "mean      0.336240        NaN           NaN         0.367200  ...   \n",
       "std       0.062825        NaN           NaN         0.086184  ...   \n",
       "min       0.261000        NaN           NaN         0.216000  ...   \n",
       "25%       0.306000        NaN           NaN         0.378000  ...   \n",
       "50%       0.329400        NaN           NaN         0.405000  ...   \n",
       "75%       0.354600        NaN           NaN         0.414000  ...   \n",
       "max       0.430200        NaN           NaN         0.423000  ...   \n",
       "\n",
       "        Linear fiber diameter  Quadratic fiber diameter  4th order pore  \\\n",
       "count              107.000000                107.000000      107.000000   \n",
       "unique                    NaN                       NaN             NaN   \n",
       "top                       NaN                       NaN             NaN   \n",
       "freq                      NaN                       NaN             NaN   \n",
       "mean                 0.420827                  0.487189        0.493501   \n",
       "std                  0.084744                  0.028932        0.191815   \n",
       "min                  0.340674                  0.378253        0.153095   \n",
       "25%                  0.340674                  0.476676        0.353778   \n",
       "50%                  0.354341                  0.476676        0.520377   \n",
       "75%                  0.511820                  0.498659        0.672000   \n",
       "max                  0.553997                  0.553269        0.721060   \n",
       "\n",
       "        4th order fiber  Pore (lin, step)  Fiber (lin, step)  \\\n",
       "count        107.000000        107.000000         107.000000   \n",
       "unique              NaN               NaN                NaN   \n",
       "top                 NaN               NaN                NaN   \n",
       "freq                NaN               NaN                NaN   \n",
       "mean           0.522486          0.533869           0.488288   \n",
       "std            0.073041          0.189730           0.068672   \n",
       "min            0.442717          0.193197           0.397382   \n",
       "25%            0.451495          0.403706           0.431560   \n",
       "50%            0.479828          0.560213           0.455247   \n",
       "75%            0.600025          0.690976           0.553499   \n",
       "max            0.600025          0.762173           0.578217   \n",
       "\n",
       "        Pore (quad, step)  Fiber (quad, step)  Sum (lin, step)  \\\n",
       "count          107.000000          107.000000       107.000000   \n",
       "unique                NaN                 NaN              NaN   \n",
       "top                   NaN                 NaN              NaN   \n",
       "freq                  NaN                 NaN              NaN   \n",
       "mean             0.525075            0.496932         1.022158   \n",
       "std              0.161540            0.034130         0.158887   \n",
       "min              0.231661            0.396499         0.755634   \n",
       "25%              0.440208            0.469117         0.957205   \n",
       "50%              0.516553            0.497368         0.974683   \n",
       "75%              0.688885            0.513876         1.176482   \n",
       "max              0.745886            0.562208         1.193733   \n",
       "\n",
       "        Sum (quad, step)  \n",
       "count         107.000000  \n",
       "unique               NaN  \n",
       "top                  NaN  \n",
       "freq                 NaN  \n",
       "mean            1.022008  \n",
       "std             0.154531  \n",
       "min             0.762601  \n",
       "25%             0.954084  \n",
       "50%             0.985670  \n",
       "75%             1.169006  \n",
       "max             1.186254  \n",
       "\n",
       "[11 rows x 43 columns]"
      ]
     },
     "execution_count": 481,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_85[data_85['Mean pore'].isnull()].describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can observe that there are 4 uniques counts for 'Speed' and we only have 3 possible combinations. We have to analyse this deeper incsse we have a combination in the dataset that is not used in the paper. The possible combinations are: 5, 7.5 and 10 mm/s. \n",
    "\n",
    "From this we saw that the top value for speed is 20 and is not a possible combination.We will further explore this "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 482,
   "metadata": {},
   "outputs": [],
   "source": [
    "nulls_speed_20 = data_85[(data_85['Speed (mm/s)'] == 20) & (data_85['Mean pore'].isnull())]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Almost half of our null values are explained by this combination with speed equal to 20. Also, we can observe that we have more possible combinations than the ones described in the paper. \n",
    "\n",
    "We can delete this empty rows, since it is a combination that is not investigated from the beginning and we dont have results in the rest of the metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 483,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1389, 43)"
      ]
     },
     "execution_count": 483,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data_85 = data_85.drop(data_85[(data_85['Speed (mm/s)'] == 20) & (data_85['Mean pore'].isnull())].index)\n",
    "new_data_85.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 484,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9200863930885529"
      ]
     },
     "execution_count": 484,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(new_data_85.dropna())/len(new_data_85)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We got rid off the 4% of the null values wit the 85 material component. We now have to discover where the 8% of missing values come from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Layer</th>\n",
       "      <th>Scaffold</th>\n",
       "      <th>Material</th>\n",
       "      <th>Spacing (mm)</th>\n",
       "      <th>Speed (mm/s)</th>\n",
       "      <th>Pressure (bar)</th>\n",
       "      <th>Mean fiber</th>\n",
       "      <th>Mean pore</th>\n",
       "      <th>Mean spacing</th>\n",
       "      <th>Fiber Size (x1)</th>\n",
       "      <th>...</th>\n",
       "      <th>Linear fiber diameter</th>\n",
       "      <th>Quadratic fiber diameter</th>\n",
       "      <th>4th order pore</th>\n",
       "      <th>4th order fiber</th>\n",
       "      <th>Pore (lin, step)</th>\n",
       "      <th>Fiber (lin, step)</th>\n",
       "      <th>Pore (quad, step)</th>\n",
       "      <th>Fiber (quad, step)</th>\n",
       "      <th>Sum (lin, step)</th>\n",
       "      <th>Sum (quad, step)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>56.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>7.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>1.2</td>\n",
       "      <td>10.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>13.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>56.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>49.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.336240</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.367200</td>\n",
       "      <td>...</td>\n",
       "      <td>0.493824</td>\n",
       "      <td>0.496763</td>\n",
       "      <td>0.397352</td>\n",
       "      <td>0.587140</td>\n",
       "      <td>0.437749</td>\n",
       "      <td>0.549412</td>\n",
       "      <td>0.471289</td>\n",
       "      <td>0.512174</td>\n",
       "      <td>0.987161</td>\n",
       "      <td>0.983464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.062825</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.086184</td>\n",
       "      <td>...</td>\n",
       "      <td>0.049580</td>\n",
       "      <td>0.037650</td>\n",
       "      <td>0.186917</td>\n",
       "      <td>0.036779</td>\n",
       "      <td>0.182233</td>\n",
       "      <td>0.031464</td>\n",
       "      <td>0.179300</td>\n",
       "      <td>0.037779</td>\n",
       "      <td>0.163426</td>\n",
       "      <td>0.163221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.261000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.216000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.354341</td>\n",
       "      <td>0.378253</td>\n",
       "      <td>0.153095</td>\n",
       "      <td>0.442717</td>\n",
       "      <td>0.193197</td>\n",
       "      <td>0.455247</td>\n",
       "      <td>0.231661</td>\n",
       "      <td>0.396499</td>\n",
       "      <td>0.766380</td>\n",
       "      <td>0.762601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.306000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.378000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.511820</td>\n",
       "      <td>0.498659</td>\n",
       "      <td>0.153095</td>\n",
       "      <td>0.600025</td>\n",
       "      <td>0.193197</td>\n",
       "      <td>0.533815</td>\n",
       "      <td>0.231661</td>\n",
       "      <td>0.496811</td>\n",
       "      <td>0.766380</td>\n",
       "      <td>0.762601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.329400</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.405000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.511820</td>\n",
       "      <td>0.498659</td>\n",
       "      <td>0.353778</td>\n",
       "      <td>0.600025</td>\n",
       "      <td>0.403706</td>\n",
       "      <td>0.553499</td>\n",
       "      <td>0.440208</td>\n",
       "      <td>0.513876</td>\n",
       "      <td>0.957205</td>\n",
       "      <td>0.954084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.354600</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.414000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.511820</td>\n",
       "      <td>0.498659</td>\n",
       "      <td>0.554461</td>\n",
       "      <td>0.600025</td>\n",
       "      <td>0.614216</td>\n",
       "      <td>0.573183</td>\n",
       "      <td>0.648756</td>\n",
       "      <td>0.530940</td>\n",
       "      <td>1.148030</td>\n",
       "      <td>1.145567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.430200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.423000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.553997</td>\n",
       "      <td>0.553269</td>\n",
       "      <td>0.687826</td>\n",
       "      <td>0.600025</td>\n",
       "      <td>0.690976</td>\n",
       "      <td>0.578217</td>\n",
       "      <td>0.745886</td>\n",
       "      <td>0.562208</td>\n",
       "      <td>1.176482</td>\n",
       "      <td>1.169006</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Layer  Scaffold  Material  Spacing (mm)  Speed (mm/s)  Pressure (bar)  \\\n",
       "count    56.0      56.0      56.0          56.0          56.0            56.0   \n",
       "unique    7.0       4.0       1.0           3.0           3.0             3.0   \n",
       "top       7.0       4.0      85.0           1.2          10.0             2.0   \n",
       "freq     13.0      16.0      56.0          24.0          49.0            51.0   \n",
       "mean      NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "std       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "min       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "25%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "50%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "75%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "max       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "\n",
       "        Mean fiber  Mean pore  Mean spacing  Fiber Size (x1)  ...  \\\n",
       "count     5.000000        0.0           0.0         5.000000  ...   \n",
       "unique         NaN        NaN           NaN              NaN  ...   \n",
       "top            NaN        NaN           NaN              NaN  ...   \n",
       "freq           NaN        NaN           NaN              NaN  ...   \n",
       "mean      0.336240        NaN           NaN         0.367200  ...   \n",
       "std       0.062825        NaN           NaN         0.086184  ...   \n",
       "min       0.261000        NaN           NaN         0.216000  ...   \n",
       "25%       0.306000        NaN           NaN         0.378000  ...   \n",
       "50%       0.329400        NaN           NaN         0.405000  ...   \n",
       "75%       0.354600        NaN           NaN         0.414000  ...   \n",
       "max       0.430200        NaN           NaN         0.423000  ...   \n",
       "\n",
       "        Linear fiber diameter  Quadratic fiber diameter  4th order pore  \\\n",
       "count               56.000000                 56.000000       56.000000   \n",
       "unique                    NaN                       NaN             NaN   \n",
       "top                       NaN                       NaN             NaN   \n",
       "freq                      NaN                       NaN             NaN   \n",
       "mean                 0.493824                  0.496763        0.397352   \n",
       "std                  0.049580                  0.037650        0.186917   \n",
       "min                  0.354341                  0.378253        0.153095   \n",
       "25%                  0.511820                  0.498659        0.153095   \n",
       "50%                  0.511820                  0.498659        0.353778   \n",
       "75%                  0.511820                  0.498659        0.554461   \n",
       "max                  0.553997                  0.553269        0.687826   \n",
       "\n",
       "        4th order fiber  Pore (lin, step)  Fiber (lin, step)  \\\n",
       "count         56.000000         56.000000          56.000000   \n",
       "unique              NaN               NaN                NaN   \n",
       "top                 NaN               NaN                NaN   \n",
       "freq                NaN               NaN                NaN   \n",
       "mean           0.587140          0.437749           0.549412   \n",
       "std            0.036779          0.182233           0.031464   \n",
       "min            0.442717          0.193197           0.455247   \n",
       "25%            0.600025          0.193197           0.533815   \n",
       "50%            0.600025          0.403706           0.553499   \n",
       "75%            0.600025          0.614216           0.573183   \n",
       "max            0.600025          0.690976           0.578217   \n",
       "\n",
       "        Pore (quad, step)  Fiber (quad, step)  Sum (lin, step)  \\\n",
       "count           56.000000           56.000000        56.000000   \n",
       "unique                NaN                 NaN              NaN   \n",
       "top                   NaN                 NaN              NaN   \n",
       "freq                  NaN                 NaN              NaN   \n",
       "mean             0.471289            0.512174         0.987161   \n",
       "std              0.179300            0.037779         0.163426   \n",
       "min              0.231661            0.396499         0.766380   \n",
       "25%              0.231661            0.496811         0.766380   \n",
       "50%              0.440208            0.513876         0.957205   \n",
       "75%              0.648756            0.530940         1.148030   \n",
       "max              0.745886            0.562208         1.176482   \n",
       "\n",
       "        Sum (quad, step)  \n",
       "count          56.000000  \n",
       "unique               NaN  \n",
       "top                  NaN  \n",
       "freq                 NaN  \n",
       "mean            0.983464  \n",
       "std             0.163221  \n",
       "min             0.762601  \n",
       "25%             0.762601  \n",
       "50%             0.954084  \n",
       "75%             1.145567  \n",
       "max             1.169006  \n",
       "\n",
       "[11 rows x 43 columns]"
      ]
     },
     "execution_count": 485,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data_85[new_data_85['Mean pore'].isnull()].describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the rest of null data in the variable 'Maen Pore' are distribuited over the different possible combinations, we get rid off them because they are not useful for our model and would impact it negatively"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_85 = new_data_85.drop(new_data_85[new_data_85['Mean pore'].isnull()].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9587396849212303"
      ]
     },
     "execution_count": 487,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(new_85.dropna())/len(new_85)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We still have a 5% of null values in our subset dataset with material composition of 85."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 488,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mean fiber            55\n",
       "Mean spacing          55\n",
       "Fiber Size (x1)       55\n",
       "x2                    55\n",
       "x3                    55\n",
       "x4                    55\n",
       "x5                    55\n",
       "Fiber spacing (x1)    55\n",
       "Spacing x2            55\n",
       "Spacing x3            55\n",
       "Spacing x4            55\n",
       "Spacing x5            55\n",
       "Std Mean fiber        55\n",
       "Std Mean spacing      55\n",
       "dtype: int64"
      ]
     },
     "execution_count": 488,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_missing_85 = new_85.isnull().sum()\n",
    "new_missing_85[new_missing_85>0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The rest of the missing values are concentrated in the same variables. We have to discover if the are distribuited over the same records."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 489,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Layer</th>\n",
       "      <th>Scaffold</th>\n",
       "      <th>Material</th>\n",
       "      <th>Spacing (mm)</th>\n",
       "      <th>Speed (mm/s)</th>\n",
       "      <th>Pressure (bar)</th>\n",
       "      <th>Mean fiber</th>\n",
       "      <th>Mean pore</th>\n",
       "      <th>Mean spacing</th>\n",
       "      <th>Fiber Size (x1)</th>\n",
       "      <th>...</th>\n",
       "      <th>Linear fiber diameter</th>\n",
       "      <th>Quadratic fiber diameter</th>\n",
       "      <th>4th order pore</th>\n",
       "      <th>4th order fiber</th>\n",
       "      <th>Pore (lin, step)</th>\n",
       "      <th>Fiber (lin, step)</th>\n",
       "      <th>Pore (quad, step)</th>\n",
       "      <th>Fiber (quad, step)</th>\n",
       "      <th>Sum (lin, step)</th>\n",
       "      <th>Sum (quad, step)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>55.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>55.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>9.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>3.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>5.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>9.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>55.0</td>\n",
       "      <td>33.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.550688</td>\n",
       "      <td>0.536704</td>\n",
       "      <td>0.144507</td>\n",
       "      <td>0.618461</td>\n",
       "      <td>0.187026</td>\n",
       "      <td>0.576348</td>\n",
       "      <td>0.195568</td>\n",
       "      <td>0.569287</td>\n",
       "      <td>0.763374</td>\n",
       "      <td>0.764855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.034528</td>\n",
       "      <td>0.032117</td>\n",
       "      <td>0.014484</td>\n",
       "      <td>0.023148</td>\n",
       "      <td>0.014344</td>\n",
       "      <td>0.013946</td>\n",
       "      <td>0.029696</td>\n",
       "      <td>0.032447</td>\n",
       "      <td>0.002323</td>\n",
       "      <td>0.003548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.511332</td>\n",
       "      <td>0.494049</td>\n",
       "      <td>0.134702</td>\n",
       "      <td>0.547524</td>\n",
       "      <td>0.178625</td>\n",
       "      <td>0.511617</td>\n",
       "      <td>0.170715</td>\n",
       "      <td>0.529865</td>\n",
       "      <td>0.760292</td>\n",
       "      <td>0.750829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.511820</td>\n",
       "      <td>0.498659</td>\n",
       "      <td>0.134702</td>\n",
       "      <td>0.600025</td>\n",
       "      <td>0.178625</td>\n",
       "      <td>0.573183</td>\n",
       "      <td>0.170715</td>\n",
       "      <td>0.530940</td>\n",
       "      <td>0.761682</td>\n",
       "      <td>0.762601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.573734</td>\n",
       "      <td>0.563643</td>\n",
       "      <td>0.134702</td>\n",
       "      <td>0.635921</td>\n",
       "      <td>0.178625</td>\n",
       "      <td>0.583057</td>\n",
       "      <td>0.170715</td>\n",
       "      <td>0.596503</td>\n",
       "      <td>0.761682</td>\n",
       "      <td>0.767218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.573734</td>\n",
       "      <td>0.563643</td>\n",
       "      <td>0.153095</td>\n",
       "      <td>0.635921</td>\n",
       "      <td>0.193197</td>\n",
       "      <td>0.583057</td>\n",
       "      <td>0.231661</td>\n",
       "      <td>0.596503</td>\n",
       "      <td>0.766380</td>\n",
       "      <td>0.767218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.669299</td>\n",
       "      <td>0.563643</td>\n",
       "      <td>0.194899</td>\n",
       "      <td>0.635921</td>\n",
       "      <td>0.248675</td>\n",
       "      <td>0.583057</td>\n",
       "      <td>0.231661</td>\n",
       "      <td>0.596503</td>\n",
       "      <td>0.766380</td>\n",
       "      <td>0.767218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Layer  Scaffold  Material  Spacing (mm)  Speed (mm/s)  Pressure (bar)  \\\n",
       "count    55.0      55.0      55.0          55.0          55.0            55.0   \n",
       "unique    9.0       4.0       1.0           1.0           2.0             3.0   \n",
       "top       3.0       1.0      85.0           0.8           5.0             3.0   \n",
       "freq      9.0      15.0      55.0          55.0          33.0            32.0   \n",
       "mean      NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "std       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "min       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "25%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "50%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "75%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "max       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "\n",
       "        Mean fiber  Mean pore  Mean spacing  Fiber Size (x1)  ...  \\\n",
       "count          0.0       55.0           0.0              0.0  ...   \n",
       "unique         NaN        NaN           NaN              NaN  ...   \n",
       "top            NaN        NaN           NaN              NaN  ...   \n",
       "freq           NaN        NaN           NaN              NaN  ...   \n",
       "mean           NaN        0.0           NaN              NaN  ...   \n",
       "std            NaN        0.0           NaN              NaN  ...   \n",
       "min            NaN        0.0           NaN              NaN  ...   \n",
       "25%            NaN        0.0           NaN              NaN  ...   \n",
       "50%            NaN        0.0           NaN              NaN  ...   \n",
       "75%            NaN        0.0           NaN              NaN  ...   \n",
       "max            NaN        0.0           NaN              NaN  ...   \n",
       "\n",
       "        Linear fiber diameter  Quadratic fiber diameter  4th order pore  \\\n",
       "count               55.000000                 55.000000       55.000000   \n",
       "unique                    NaN                       NaN             NaN   \n",
       "top                       NaN                       NaN             NaN   \n",
       "freq                      NaN                       NaN             NaN   \n",
       "mean                 0.550688                  0.536704        0.144507   \n",
       "std                  0.034528                  0.032117        0.014484   \n",
       "min                  0.511332                  0.494049        0.134702   \n",
       "25%                  0.511820                  0.498659        0.134702   \n",
       "50%                  0.573734                  0.563643        0.134702   \n",
       "75%                  0.573734                  0.563643        0.153095   \n",
       "max                  0.669299                  0.563643        0.194899   \n",
       "\n",
       "        4th order fiber  Pore (lin, step)  Fiber (lin, step)  \\\n",
       "count         55.000000         55.000000          55.000000   \n",
       "unique              NaN               NaN                NaN   \n",
       "top                 NaN               NaN                NaN   \n",
       "freq                NaN               NaN                NaN   \n",
       "mean           0.618461          0.187026           0.576348   \n",
       "std            0.023148          0.014344           0.013946   \n",
       "min            0.547524          0.178625           0.511617   \n",
       "25%            0.600025          0.178625           0.573183   \n",
       "50%            0.635921          0.178625           0.583057   \n",
       "75%            0.635921          0.193197           0.583057   \n",
       "max            0.635921          0.248675           0.583057   \n",
       "\n",
       "        Pore (quad, step)  Fiber (quad, step)  Sum (lin, step)  \\\n",
       "count           55.000000           55.000000        55.000000   \n",
       "unique                NaN                 NaN              NaN   \n",
       "top                   NaN                 NaN              NaN   \n",
       "freq                  NaN                 NaN              NaN   \n",
       "mean             0.195568            0.569287         0.763374   \n",
       "std              0.029696            0.032447         0.002323   \n",
       "min              0.170715            0.529865         0.760292   \n",
       "25%              0.170715            0.530940         0.761682   \n",
       "50%              0.170715            0.596503         0.761682   \n",
       "75%              0.231661            0.596503         0.766380   \n",
       "max              0.231661            0.596503         0.766380   \n",
       "\n",
       "        Sum (quad, step)  \n",
       "count          55.000000  \n",
       "unique               NaN  \n",
       "top                  NaN  \n",
       "freq                 NaN  \n",
       "mean            0.764855  \n",
       "std             0.003548  \n",
       "min             0.750829  \n",
       "25%             0.762601  \n",
       "50%             0.767218  \n",
       "75%             0.767218  \n",
       "max             0.767218  \n",
       "\n",
       "[11 rows x 43 columns]"
      ]
     },
     "execution_count": 489,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_85[new_85['Mean fiber'].isnull()].describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The missing values on the variable 'Mean Fiber' seems to be concentrated in the combination of 0.8 spacing (mm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(55, 43)"
      ]
     },
     "execution_count": 490,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nulls_spacing_8 = new_85[(new_85['Spacing (mm)'] == 0.8) & (new_85['Mean fiber'].isnull())]\n",
    "\n",
    "nulls_spacing_8.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We delete all the empty rows under the conditions of spacing described before."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 491,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1278, 43)"
      ]
     },
     "execution_count": 491,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "material_85 = new_85.drop(new_85[(new_85['Spacing (mm)'] == 0.8) & (new_85['Mean fiber'].isnull())].index)\n",
    "material_85.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 492,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 492,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(material_85)/len(data_85.dropna())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Following this methodwe checked that we got rid off all the null values and we are not compromising the ability of the data to be used in building the model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.2. Material composition 90"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 493,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(720, 43)"
      ]
     },
     "execution_count": 493,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Material Composition --> 90\n",
    "\n",
    "data_90 = data[data['Material']==90]\n",
    "data_90.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 494,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7569444444444444"
      ]
     },
     "execution_count": 494,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data_90.dropna())/len(data_90)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 495,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "In summary, we have 175 empty rows\n"
     ]
    }
   ],
   "source": [
    "print('In summary, we have', len(data_90) - len(data_90.dropna()), 'empty rows')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the composition material 90 we have the 25% of the values that are nulls."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 496,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Mean fiber            174\n",
       "Mean pore             159\n",
       "Mean spacing          175\n",
       "Fiber Size (x1)       174\n",
       "x2                    174\n",
       "x3                    174\n",
       "x4                    174\n",
       "x5                    174\n",
       "Pore Size (x1)        159\n",
       "x2 2                  159\n",
       "x3 2                  159\n",
       "x4 2                  159\n",
       "x5 2                  159\n",
       "Fiber spacing (x1)    175\n",
       "Spacing x2            175\n",
       "Spacing x3            175\n",
       "Spacing x4            175\n",
       "Spacing x5            175\n",
       "Std Mean fiber        174\n",
       "Std Mean pore         159\n",
       "Std Mean spacing      175\n",
       "dtype: int64"
      ]
     },
     "execution_count": 496,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "missing_90 = data_90.isnull().sum()\n",
    "missing_90[missing_90>0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check if the 175 missing rows contemplated in the variable 'Mean Spacing'also explain the missing values in the rest of ths subset material 90."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 497,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Layer</th>\n",
       "      <th>Scaffold</th>\n",
       "      <th>Material</th>\n",
       "      <th>Spacing (mm)</th>\n",
       "      <th>Speed (mm/s)</th>\n",
       "      <th>Pressure (bar)</th>\n",
       "      <th>Mean fiber</th>\n",
       "      <th>Mean pore</th>\n",
       "      <th>Mean spacing</th>\n",
       "      <th>Fiber Size (x1)</th>\n",
       "      <th>...</th>\n",
       "      <th>Linear fiber diameter</th>\n",
       "      <th>Quadratic fiber diameter</th>\n",
       "      <th>4th order pore</th>\n",
       "      <th>4th order fiber</th>\n",
       "      <th>Pore (lin, step)</th>\n",
       "      <th>Fiber (lin, step)</th>\n",
       "      <th>Pore (quad, step)</th>\n",
       "      <th>Fiber (quad, step)</th>\n",
       "      <th>Sum (lin, step)</th>\n",
       "      <th>Sum (quad, step)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>174.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "      <td>174.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>10.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>10.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>0.5</td>\n",
       "      <td>7.5</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>59.0</td>\n",
       "      <td>45.0</td>\n",
       "      <td>174.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>112.0</td>\n",
       "      <td>133.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.357846</td>\n",
       "      <td>0.308022</td>\n",
       "      <td>0.365140</td>\n",
       "      <td>0.329624</td>\n",
       "      <td>0.368361</td>\n",
       "      <td>0.329843</td>\n",
       "      <td>0.369873</td>\n",
       "      <td>0.328603</td>\n",
       "      <td>0.698204</td>\n",
       "      <td>0.698476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.020849</td>\n",
       "      <td>0.039775</td>\n",
       "      <td>0.261248</td>\n",
       "      <td>0.071267</td>\n",
       "      <td>0.236364</td>\n",
       "      <td>0.022081</td>\n",
       "      <td>0.247062</td>\n",
       "      <td>0.045405</td>\n",
       "      <td>0.236964</td>\n",
       "      <td>0.239151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.334759</td>\n",
       "      <td>0.251987</td>\n",
       "      <td>0.096258</td>\n",
       "      <td>0.231347</td>\n",
       "      <td>0.115625</td>\n",
       "      <td>0.257001</td>\n",
       "      <td>0.113562</td>\n",
       "      <td>0.258938</td>\n",
       "      <td>0.372626</td>\n",
       "      <td>0.372499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.353169</td>\n",
       "      <td>0.305448</td>\n",
       "      <td>0.141095</td>\n",
       "      <td>0.332262</td>\n",
       "      <td>0.144188</td>\n",
       "      <td>0.330758</td>\n",
       "      <td>0.147608</td>\n",
       "      <td>0.314463</td>\n",
       "      <td>0.465159</td>\n",
       "      <td>0.465165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.353169</td>\n",
       "      <td>0.305448</td>\n",
       "      <td>0.238265</td>\n",
       "      <td>0.332262</td>\n",
       "      <td>0.317736</td>\n",
       "      <td>0.336921</td>\n",
       "      <td>0.321773</td>\n",
       "      <td>0.330086</td>\n",
       "      <td>0.654209</td>\n",
       "      <td>0.654857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.353169</td>\n",
       "      <td>0.305448</td>\n",
       "      <td>0.544504</td>\n",
       "      <td>0.332262</td>\n",
       "      <td>0.565031</td>\n",
       "      <td>0.340283</td>\n",
       "      <td>0.512579</td>\n",
       "      <td>0.336336</td>\n",
       "      <td>0.900511</td>\n",
       "      <td>0.902076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0.405187</td>\n",
       "      <td>0.404393</td>\n",
       "      <td>0.945870</td>\n",
       "      <td>0.490484</td>\n",
       "      <td>0.824642</td>\n",
       "      <td>0.365490</td>\n",
       "      <td>0.900376</td>\n",
       "      <td>0.434978</td>\n",
       "      <td>1.147414</td>\n",
       "      <td>1.162596</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11 rows × 43 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Layer  Scaffold  Material  Spacing (mm)  Speed (mm/s)  Pressure (bar)  \\\n",
       "count   174.0     174.0     174.0         174.0         174.0           174.0   \n",
       "unique   10.0       4.0       1.0           7.0           2.0             3.0   \n",
       "top      10.0       3.0      90.0           0.5           7.5             3.0   \n",
       "freq     59.0      45.0     174.0          47.0         112.0           133.0   \n",
       "mean      NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "std       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "min       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "25%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "50%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "75%       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "max       NaN       NaN       NaN           NaN           NaN             NaN   \n",
       "\n",
       "        Mean fiber  Mean pore  Mean spacing  Fiber Size (x1)  ...  \\\n",
       "count          0.0       16.0           0.0              0.0  ...   \n",
       "unique         NaN        NaN           NaN              NaN  ...   \n",
       "top            NaN        NaN           NaN              NaN  ...   \n",
       "freq           NaN        NaN           NaN              NaN  ...   \n",
       "mean           NaN        0.0           NaN              NaN  ...   \n",
       "std            NaN        0.0           NaN              NaN  ...   \n",
       "min            NaN        0.0           NaN              NaN  ...   \n",
       "25%            NaN        0.0           NaN              NaN  ...   \n",
       "50%            NaN        0.0           NaN              NaN  ...   \n",
       "75%            NaN        0.0           NaN              NaN  ...   \n",
       "max            NaN        0.0           NaN              NaN  ...   \n",
       "\n",
       "        Linear fiber diameter  Quadratic fiber diameter  4th order pore  \\\n",
       "count              174.000000                174.000000      174.000000   \n",
       "unique                    NaN                       NaN             NaN   \n",
       "top                       NaN                       NaN             NaN   \n",
       "freq                      NaN                       NaN             NaN   \n",
       "mean                 0.357846                  0.308022        0.365140   \n",
       "std                  0.020849                  0.039775        0.261248   \n",
       "min                  0.334759                  0.251987        0.096258   \n",
       "25%                  0.353169                  0.305448        0.141095   \n",
       "50%                  0.353169                  0.305448        0.238265   \n",
       "75%                  0.353169                  0.305448        0.544504   \n",
       "max                  0.405187                  0.404393        0.945870   \n",
       "\n",
       "        4th order fiber  Pore (lin, step)  Fiber (lin, step)  \\\n",
       "count        174.000000        174.000000         174.000000   \n",
       "unique              NaN               NaN                NaN   \n",
       "top                 NaN               NaN                NaN   \n",
       "freq                NaN               NaN                NaN   \n",
       "mean           0.329624          0.368361           0.329843   \n",
       "std            0.071267          0.236364           0.022081   \n",
       "min            0.231347          0.115625           0.257001   \n",
       "25%            0.332262          0.144188           0.330758   \n",
       "50%            0.332262          0.317736           0.336921   \n",
       "75%            0.332262          0.565031           0.340283   \n",
       "max            0.490484          0.824642           0.365490   \n",
       "\n",
       "        Pore (quad, step)  Fiber (quad, step)  Sum (lin, step)  \\\n",
       "count          174.000000          174.000000       174.000000   \n",
       "unique                NaN                 NaN              NaN   \n",
       "top                   NaN                 NaN              NaN   \n",
       "freq                  NaN                 NaN              NaN   \n",
       "mean             0.369873            0.328603         0.698204   \n",
       "std              0.247062            0.045405         0.236964   \n",
       "min              0.113562            0.258938         0.372626   \n",
       "25%              0.147608            0.314463         0.465159   \n",
       "50%              0.321773            0.330086         0.654209   \n",
       "75%              0.512579            0.336336         0.900511   \n",
       "max              0.900376            0.434978         1.147414   \n",
       "\n",
       "        Sum (quad, step)  \n",
       "count         174.000000  \n",
       "unique               NaN  \n",
       "top                  NaN  \n",
       "freq                 NaN  \n",
       "mean            0.698476  \n",
       "std             0.239151  \n",
       "min             0.372499  \n",
       "25%             0.465165  \n",
       "50%             0.654857  \n",
       "75%             0.902076  \n",
       "max             1.162596  \n",
       "\n",
       "[11 rows x 43 columns]"
      ]
     },
     "execution_count": 497,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_90[data_90['Mean fiber'].isnull()].describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can observe 7 different types of combinations for 'Spacing (mm)' that explain the missing values in the composition material 90. Since in the paper we only have 3 possible combinations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 498,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(545, 43)"
      ]
     },
     "execution_count": 498,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "material_90 = data_90.drop(data_90[data_90['Mean spacing'].isnull()].index)\n",
    "material_90.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 499,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(material_90)/len(data_90.dropna())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As mentioned in the paper, additional speed were tested for material composition 85 and additional spacings were considered for material composition 90. Not all combinations of processing parameters were printable. Thus this reinforces the methodology of deleting the empty rows for additional combinations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.3. Unification Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 500,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percent of eliminated rows represents the 0.17623136014460006 of the original dataset and also were equivalent to 390 rows\n"
     ]
    }
   ],
   "source": [
    "df = material_85.append(material_90)\n",
    "print('The percent of eliminated rows represents the', 1 - (len(df)/len(data)), 'of the original dataset and also were equivalent to', data.shape[0] - df.shape[0], 'rows')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 501,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the new dimension of the dataset is (1823, 43)\n"
     ]
    }
   ],
   "source": [
    "print('the new dimension of the dataset is {0}'.format(df.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 2.4. Creation of AUX variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this part of the process, we create our target variable 'Machine Precision (%)' and we add the 'Viscosity' variable. \n",
    "\n",
    "Material accuracy was not investigated as we do not have the data once cleaned. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 502,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Material Precision\n",
    "\n",
    "df[\"Spacing (mm)\"] = df[\"Spacing (mm)\"].astype(float)\n",
    "\n",
    "df['Material_precision'] = (df[\"Spacing (mm)\"] - df[\"Mean spacing\"])*100/df[\"Spacing (mm)\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 503,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Layer</th>\n",
       "      <th>Scaffold</th>\n",
       "      <th>Material</th>\n",
       "      <th>Spacing (mm)</th>\n",
       "      <th>Speed (mm/s)</th>\n",
       "      <th>Pressure (bar)</th>\n",
       "      <th>Mean fiber</th>\n",
       "      <th>Mean pore</th>\n",
       "      <th>Mean spacing</th>\n",
       "      <th>Fiber Size (x1)</th>\n",
       "      <th>...</th>\n",
       "      <th>4th order pore</th>\n",
       "      <th>4th order fiber</th>\n",
       "      <th>Pore (lin, step)</th>\n",
       "      <th>Fiber (lin, step)</th>\n",
       "      <th>Pore (quad, step)</th>\n",
       "      <th>Fiber (quad, step)</th>\n",
       "      <th>Sum (lin, step)</th>\n",
       "      <th>Sum (quad, step)</th>\n",
       "      <th>Material_precision</th>\n",
       "      <th>Viscosity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>1.2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.7326</td>\n",
       "      <td>0.4230</td>\n",
       "      <td>1.1556</td>\n",
       "      <td>0.747</td>\n",
       "      <td>...</td>\n",
       "      <td>0.587088</td>\n",
       "      <td>0.570309</td>\n",
       "      <td>0.630166</td>\n",
       "      <td>0.489413</td>\n",
       "      <td>0.662164</td>\n",
       "      <td>0.474574</td>\n",
       "      <td>1.119579</td>\n",
       "      <td>1.136738</td>\n",
       "      <td>3.70</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>85</td>\n",
       "      <td>1.2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.6714</td>\n",
       "      <td>0.4680</td>\n",
       "      <td>1.1394</td>\n",
       "      <td>0.657</td>\n",
       "      <td>...</td>\n",
       "      <td>0.587088</td>\n",
       "      <td>0.570309</td>\n",
       "      <td>0.630166</td>\n",
       "      <td>0.489413</td>\n",
       "      <td>0.662164</td>\n",
       "      <td>0.474574</td>\n",
       "      <td>1.119579</td>\n",
       "      <td>1.136738</td>\n",
       "      <td>5.05</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>85</td>\n",
       "      <td>1.2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.5274</td>\n",
       "      <td>0.6174</td>\n",
       "      <td>1.1448</td>\n",
       "      <td>0.513</td>\n",
       "      <td>...</td>\n",
       "      <td>0.587088</td>\n",
       "      <td>0.570309</td>\n",
       "      <td>0.630166</td>\n",
       "      <td>0.489413</td>\n",
       "      <td>0.662164</td>\n",
       "      <td>0.474574</td>\n",
       "      <td>1.119579</td>\n",
       "      <td>1.136738</td>\n",
       "      <td>4.60</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>85</td>\n",
       "      <td>1.2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.2700</td>\n",
       "      <td>0.8766</td>\n",
       "      <td>1.1466</td>\n",
       "      <td>0.306</td>\n",
       "      <td>...</td>\n",
       "      <td>0.587088</td>\n",
       "      <td>0.570309</td>\n",
       "      <td>0.630166</td>\n",
       "      <td>0.489413</td>\n",
       "      <td>0.662164</td>\n",
       "      <td>0.474574</td>\n",
       "      <td>1.119579</td>\n",
       "      <td>1.136738</td>\n",
       "      <td>4.45</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>1.2</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.4644</td>\n",
       "      <td>0.6642</td>\n",
       "      <td>1.1286</td>\n",
       "      <td>0.414</td>\n",
       "      <td>...</td>\n",
       "      <td>0.587088</td>\n",
       "      <td>0.570309</td>\n",
       "      <td>0.630166</td>\n",
       "      <td>0.489413</td>\n",
       "      <td>0.662164</td>\n",
       "      <td>0.474574</td>\n",
       "      <td>1.119579</td>\n",
       "      <td>1.136738</td>\n",
       "      <td>5.95</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  Layer Scaffold Material  Spacing (mm) Speed (mm/s) Pressure (bar)  \\\n",
       "0     1        1       85           1.2            5              2   \n",
       "1     1        2       85           1.2            5              2   \n",
       "2     1        3       85           1.2            5              2   \n",
       "3     1        4       85           1.2            5              2   \n",
       "4     2        1       85           1.2            5              2   \n",
       "\n",
       "   Mean fiber  Mean pore  Mean spacing  Fiber Size (x1)  ...  4th order pore  \\\n",
       "0      0.7326     0.4230        1.1556            0.747  ...        0.587088   \n",
       "1      0.6714     0.4680        1.1394            0.657  ...        0.587088   \n",
       "2      0.5274     0.6174        1.1448            0.513  ...        0.587088   \n",
       "3      0.2700     0.8766        1.1466            0.306  ...        0.587088   \n",
       "4      0.4644     0.6642        1.1286            0.414  ...        0.587088   \n",
       "\n",
       "   4th order fiber  Pore (lin, step)  Fiber (lin, step)  Pore (quad, step)  \\\n",
       "0         0.570309          0.630166           0.489413           0.662164   \n",
       "1         0.570309          0.630166           0.489413           0.662164   \n",
       "2         0.570309          0.630166           0.489413           0.662164   \n",
       "3         0.570309          0.630166           0.489413           0.662164   \n",
       "4         0.570309          0.630166           0.489413           0.662164   \n",
       "\n",
       "   Fiber (quad, step)  Sum (lin, step)  Sum (quad, step)  Material_precision  \\\n",
       "0            0.474574         1.119579          1.136738                3.70   \n",
       "1            0.474574         1.119579          1.136738                5.05   \n",
       "2            0.474574         1.119579          1.136738                4.60   \n",
       "3            0.474574         1.119579          1.136738                4.45   \n",
       "4            0.474574         1.119579          1.136738                5.95   \n",
       "\n",
       "   Viscosity  \n",
       "0       45.0  \n",
       "1       45.0  \n",
       "2       45.0  \n",
       "3       45.0  \n",
       "4       45.0  \n",
       "\n",
       "[5 rows x 45 columns]"
      ]
     },
     "execution_count": 503,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viscosity\n",
    "\n",
    "df['Viscosity'] = np.where(df['Material'] == 85, 45., 66.)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 504,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Layer', 'Spacing', 'Speed', 'Pressure', 'Viscosity',\n",
       "       'Material_precision'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 504,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Final Structure. We just keep the possible cominationsand the target variable.\n",
    "\n",
    "df = df[['Layer', 'Spacing (mm)', 'Speed (mm/s)', 'Pressure (bar)', 'Viscosity', 'Material_precision']]\n",
    "\n",
    "df_1 = df.rename(columns={'Spacing (mm)':'Spacing', 'Speed (mm/s)':'Speed', 'Pressure (bar)':'Pressure'})\n",
    "df_1.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 505,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Layer                  object\n",
       "Spacing               float64\n",
       "Speed                  object\n",
       "Pressure               object\n",
       "Viscosity             float64\n",
       "Material_precision    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 505,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 506,
   "metadata": {},
   "outputs": [],
   "source": [
    "_obj = ['Layer', 'Speed', 'Pressure']\n",
    "\n",
    "df_1[_obj] = df_1[_obj].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 507,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x648 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_corr(df_1):\n",
    "    corr = df_1.corr()\n",
    "    mask = np.zeros_like(corr, dtype=np.bool)\n",
    "    mask[np.triu_indices_from(mask)] = True\n",
    "    f, ax = plt.subplots(figsize=(8, 9))\n",
    "    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n",
    "    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n",
    "                square=True, linewidths=0.5, cbar_kws={\"shrink\": .5})\n",
    "\n",
    "plot_corr(df_1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can observe a correlation between 'Viscosity' and 'Pressure'. Also, our target variable ('Material_precision') has a positive correlation with all the explanatory variables, with the exception of 'Speed' that presents a soft negative correlation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 508,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We drop our target variable\n",
    "\n",
    "df_X = df_1.drop('Material_precision', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally the scatter plots and box plots were generated to help interpret the validity of our results used later \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 509,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.5, 6.5, -30.0, 25.0)"
      ]
     },
     "execution_count": 509,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "#scatter plot \n",
    "var = 'Speed'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis = 1)\n",
    "data.plot.scatter(x = var, y = 'Material_precision', ylim=(-30, 22))\n",
    "                                        \n",
    "#- seem to be linerarly related\n",
    "\n",
    "var = 'Speed'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis=1)\n",
    "f, ax = plt.subplots(figsize=(6, 6))\n",
    "fig = sns.boxplot(x=var, y=\"Material_precision\", data=data)\n",
    "fig.axis(ymin=0, ymax=22)\n",
    "\n",
    "\n",
    "var = 'Pressure'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis = 1)\n",
    "data.plot.scatter(x = var, y = 'Material_precision', ylim=(-30, 25))\n",
    "                                        \n",
    "#- seem to be linerarly related\n",
    "\n",
    "var = 'Pressure'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis=1)\n",
    "f, ax = plt.subplots(figsize=(8, 6))\n",
    "fig = sns.boxplot(x=var, y=\"Material_precision\", data=data)\n",
    "fig.axis(ymin=-30, ymax=25)\n",
    "\n",
    "\n",
    "var = 'Viscosity'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis = 1)\n",
    "data.plot.scatter(x = var, y = 'Material_precision', ylim=(-30, 25))\n",
    "                                        \n",
    "#- seem to be linerarly related\n",
    "\n",
    "var = 'Viscosity'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis=1)\n",
    "f, ax = plt.subplots(figsize=(8, 6))\n",
    "fig = sns.boxplot(x=var, y=\"Material_precision\", data=data)\n",
    "fig.axis(ymin=-30, ymax=40)\n",
    "\n",
    "\n",
    "\n",
    "var = 'Layer'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis = 1)\n",
    "data.plot.scatter(x = var, y = 'Material_precision', ylim=(-30, 25))\n",
    "                                        \n",
    "#- seem to be linerarly related\n",
    "\n",
    "var = 'Layer'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis=1)\n",
    "f, ax = plt.subplots(figsize=(6, 4))\n",
    "fig = sns.boxplot(x=var, y=\"Material_precision\", data=data)\n",
    "fig.axis(ymin=-30, ymax=40)\n",
    "\n",
    "\n",
    "\n",
    "var = 'Spacing'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis = 1)\n",
    "data.plot.scatter(x = var, y = 'Material_precision', ylim=(-30, 25))\n",
    "                                        \n",
    "#- seem to be linerarly related\n",
    "\n",
    "var = 'Spacing'\n",
    "data = pd.concat([df_1['Material_precision'], df_1[var]], axis=1)\n",
    "f, ax = plt.subplots(figsize=(6, 6))\n",
    "fig = sns.boxplot(x=var, y=\"Material_precision\", data=data)\n",
    "fig.axis(ymin=-30, ymax=25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 3 Clustering Methods"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The design of the model answer the following question: which combinations of the initial parameters suits for better results in terms of material precision?\n",
    "\n",
    "In other words, we will build a ML Unsupervised model that classifies the initial parameters in different groups, where each group is associated with different possible results ('Low' or 'High' performances)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firstly, we need to focus on the number os possible groups associated with the initial parameters. We will analyse the performance of three different techniques for clusters problems.\n",
    "\n",
    "Secondly, we will implement an evaluation of the results, choosing the most appropiate algorithm.\n",
    "\n",
    "Finally, we will study the initial combinations in each group and we will try to interpret which results are associated with each possible result in term of 'Material_precision' ('Low' or 'High' performance).\n",
    "\n",
    "By this way, we would are able to determinate which combinations of the initial parameters have an effect in changing 'Material_precision'."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.1. K-Means"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firslty, we have to define the number of clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 510,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "KMeans(n_clusters=4)\n",
      "Sum of the least squares of distances to the cluster / Inertia:  14514.509620048699\n"
     ]
    }
   ],
   "source": [
    "kmeans3=KMeans(n_clusters=4).fit(df_X)\n",
    "print(kmeans)\n",
    "print('Sum of the least squares of distances to the cluster / Inertia: ', kmeans3.inertia_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Elbow method to get the number of potential clusters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 511,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Inertia of k-Means versus number of clusters')"
      ]
     },
     "execution_count": 511,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# n_clusters de 2 a 9\n",
    "scores = [KMeans(n_clusters=i+2).fit(df_X).inertia_ for i in range(10)]\n",
    "plt.plot(np.arange(2, 12), scores)\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel(\"Inertia\")\n",
    "plt.title(\"Inertia of k-Means versus number of clusters\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can observe that the number of clusters that better fit our model is 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 512,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'auto',\n",
       " 'copy_x': True,\n",
       " 'init': 'k-means++',\n",
       " 'max_iter': 300,\n",
       " 'n_clusters': 4,\n",
       " 'n_init': 10,\n",
       " 'n_jobs': 'deprecated',\n",
       " 'precompute_distances': 'deprecated',\n",
       " 'random_state': None,\n",
       " 'tol': 0.0001,\n",
       " 'verbose': 0}"
      ]
     },
     "execution_count": 512,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans = KMeans(n_clusters=4)\n",
    "kmeans.fit(df_X)\n",
    "kmeans.get_params()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.2. K-Means Normalized"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second method introduced is K-Means normalized. This method consists in normalizing the distance of each row of the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 513,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Inertia of Cosine k-Means versus number of clusters')"
      ]
     },
     "execution_count": 513,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "normalized_vectors = preprocessing.normalize(df_X)\n",
    "scores = [KMeans(n_clusters=i+2).fit(normalized_vectors).inertia_ for i in range(10)]\n",
    "plt.plot(np.arange(2, 12), scores)\n",
    "plt.xlabel('Number of clusters')\n",
    "plt.ylabel(\"Inertia\")\n",
    "plt.title(\"Inertia of Cosine k-Means versus number of clusters\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The number of clusters is an Hyperparameter in the Kmeans technique. One way to determinate the number of possible clusters is the 'Elbow' method, where you set the fit model and the inertia you get increasing the number of clusters. By the way, in both cases we observe that at 4 we get a disminishing return. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 514,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'auto',\n",
       " 'copy_x': True,\n",
       " 'init': 'k-means++',\n",
       " 'max_iter': 300,\n",
       " 'n_clusters': 4,\n",
       " 'n_init': 10,\n",
       " 'n_jobs': 'deprecated',\n",
       " 'precompute_distances': 'deprecated',\n",
       " 'random_state': None,\n",
       " 'tol': 0.0001,\n",
       " 'verbose': 0}"
      ]
     },
     "execution_count": 514,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_kmeans = KMeans(n_clusters=4)\n",
    "normalized_kmeans.fit(normalized_vectors)\n",
    "normalized_kmeans.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 515,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of the least squares of distances to the cluster / Inertia:  4.739591743325419\n"
     ]
    }
   ],
   "source": [
    "print('Sum of the least squares of distances to the cluster / Inertia: ', normalized_kmeans.inertia_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 3.3. DBSCAN "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The last method used is DBSCAN. In this method, the number of potential cluster is an output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 516,
   "metadata": {},
   "outputs": [],
   "source": [
    "min_samples = df_X.shape[1]+1 #  Rule of thumb; number of dimensions D in the data set, as minPts ≥ D + 1\n",
    "dbscan = DBSCAN(eps=3.5, min_samples=min_samples).fit(df_X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 517,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'algorithm': 'auto',\n",
       " 'eps': 3.5,\n",
       " 'leaf_size': 30,\n",
       " 'metric': 'euclidean',\n",
       " 'metric_params': None,\n",
       " 'min_samples': 6,\n",
       " 'n_jobs': None,\n",
       " 'p': None}"
      ]
     },
     "execution_count": 517,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dbscan.get_params()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By the rule of the thumb, since we have 5 variables, we set the hyperparameter 'min_samples' to 6."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4. Evaluation "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.1. Number of elements in each cluster "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 518,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of data in each cluster with kmeans:  Counter({1: 545, 2: 504, 0: 471, 3: 303})\n",
      "Number of data in each cluster with cosine distribution:  Counter({0: 687, 1: 464, 3: 369, 2: 303})\n",
      "Number of data in each cluster with DBSCAN:  Counter({0: 975, 3: 545, 1: 234, 2: 69})\n"
     ]
    }
   ],
   "source": [
    "from collections import Counter\n",
    "print('Number of data in each cluster with kmeans: ',Counter(kmeans.labels_))\n",
    "print('Number of data in each cluster with cosine distribution: ',Counter(normalized_kmeans.labels_))\n",
    "print('Number of data in each cluster with DBSCAN: ',Counter(dbscan.labels_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 519,
   "metadata": {},
   "outputs": [],
   "source": [
    "k_medias = Counter(kmeans.labels_)\n",
    "\n",
    "k_medias = pd.DataFrame.from_dict(k_medias, orient='index').reset_index().rename(columns={0:'K Means'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 520,
   "metadata": {},
   "outputs": [],
   "source": [
    "normalized = Counter(normalized_kmeans.labels_)\n",
    "\n",
    "normalized = pd.DataFrame.from_dict(normalized, orient='index').reset_index().rename(columns={0:'K-Means Normalised'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 521,
   "metadata": {},
   "outputs": [],
   "source": [
    "dbscan_1 = Counter(dbscan.labels_)\n",
    "\n",
    "dbscan_1 = pd.DataFrame.from_dict(dbscan_1, orient='index').reset_index().rename(columns={0:'DBSCAN'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 522,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>K Means</th>\n",
       "      <th>K-Means Normalised</th>\n",
       "      <th>DBSCAN</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>471</td>\n",
       "      <td>687</td>\n",
       "      <td>975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>545</td>\n",
       "      <td>464</td>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>504</td>\n",
       "      <td>303</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>303</td>\n",
       "      <td>369</td>\n",
       "      <td>545</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  K Means  K-Means Normalised  DBSCAN\n",
       "1      0      471                 687     975\n",
       "3      1      545                 464     234\n",
       "0      2      504                 303      69\n",
       "2      3      303                 369     545"
      ]
     },
     "execution_count": 522,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = k_medias.join(normalized.set_index('index'), on='index')\n",
    "result.join(dbscan_1.set_index('index'), on='index').sort_values(by=['index'], axis=0, ascending=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this chart we can observe the number of initial possible combinations aggrupated in each cluster. \n",
    "\n",
    "In other words, we can see how the different techniques classified each row in the different possible clusters."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 4.2. Silhouette"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 523,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "kmeans: 0.390058000704903\n",
      "Normalized (cosine) kmeans: 0.630954326266849\n",
      "DBSCAN: 0.1595428840458113\n"
     ]
    }
   ],
   "source": [
    "print('kmeans: {}'.format(silhouette_score(df, kmeans.labels_, metric='euclidean')))\n",
    "print('Normalized (cosine) kmeans: {}'.format(silhouette_score(normalized_vectors, normalized_kmeans.labels_, metric='cosine')))\n",
    "print('DBSCAN: {}'.format(silhouette_score(df, dbscan.labels_, metric='cosine')))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Silhouette is a formal socre that measures the separability between clusters. In this case, the Normalized Kmeans perfoms better results than the other techniques, since the distances between clusters is bigger."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 5. Visualization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For visualisation of the clusters, we will reduce the dimensionality of our original dataset and graph the distribution of the labels."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will implement a PCA method to reduce the dimensionality of our original dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 524,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_pca(n_components, data):\n",
    "    names = ['x', 'y', 'z']\n",
    "    matrix = PCA(n_components=n_components).fit_transform(data)\n",
    "    df_matrix = pd.DataFrame(matrix)\n",
    "    df_matrix.rename({i:names[i] for i in range(n_components)}, axis=1, inplace=True)\n",
    "        \n",
    "    return df_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 525,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_graph = "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 526,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 527,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\ncolours=['purple','blue','orange','red']\\n\\ndf_X['kmedias']=kmeans.labels_\\ndf_X['kmedias_norm']=normalized_kmeans.labels_\\ndf_X['dbscan']=dbscan.labels_\\n\\n\\nf1 = df_X.kmedias\\nf2 = df_X.kmedias_norm\\nf3 = df_X.dbscan\\n\\n\""
      ]
     },
     "execution_count": 527,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "colours=['purple','blue','orange','red']\n",
    "\n",
    "df_X['kmedias']=kmeans.labels_\n",
    "df_X['kmedias_norm']=normalized_kmeans.labels_\n",
    "df_X['dbscan']=dbscan.labels_\n",
    "\n",
    "\n",
    "f1 = df_X.kmedias\n",
    "f2 = df_X.kmedias_norm\n",
    "f3 = df_X.dbscan\n",
    "\n",
    "\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 528,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nk_means_values = np.where(f1 == 0, colours[0], np.where(f1 == 1, colours[1], np.where(f1 == 2, colours[2], colours[3])))\\n\\nk_means_norm_values = np.where(f2 == 0, colours[0], np.where(f2 == 1, colours[1], np.where(f2 == 2, colours[2], colours[3])))\\n\\ndbscan_values = np.where(f3 == 0, colours[0], np.where(f3 == 1, colours[1], np.where(f3 == 2, colours[2], colours[3])))\\n'"
      ]
     },
     "execution_count": 528,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "k_means_values = np.where(f1 == 0, colours[0], np.where(f1 == 1, colours[1], np.where(f1 == 2, colours[2], colours[3])))\n",
    "\n",
    "k_means_norm_values = np.where(f2 == 0, colours[0], np.where(f2 == 1, colours[1], np.where(f2 == 2, colours[2], colours[3])))\n",
    "\n",
    "dbscan_values = np.where(f3 == 0, colours[0], np.where(f3 == 1, colours[1], np.where(f3 == 2, colours[2], colours[3])))\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 529,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x864 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca_df = prepare_pca(3, df_X)\n",
    "\n",
    "\n",
    "\n",
    "fig, axs = plt.subplots(nrows=2, ncols=2, sharex=True)\n",
    "fig.set_figheight(12)\n",
    "fig.set_figwidth(18)\n",
    "\n",
    "axs[0,0].scatter(x=pca_df.x, y=pca_df.y,c=k_means_values,  s=2)\n",
    "axs[0,0].set_title('K-means PCA')\n",
    "axs[0,0].set_xlabel('Component 1')\n",
    "axs[0,0].set_ylabel('Component 2')\n",
    "\n",
    "\n",
    "axs[0,1].scatter(x=pca_df.x, y=pca_df.y,c=k_means_norm_values,  s=2)\n",
    "axs[0,1].set_title('Normalised K-means PCA')\n",
    "axs[0,1].set_xlabel('Component 1')\n",
    "axs[0,1].set_ylabel('Component 2')\n",
    "\n",
    "\n",
    "axs[1,0].scatter(x=pca_df.x, y=pca_df.y,c=dbscan_values, s=2)\n",
    "axs[1,0].set_title('DBSCAN PCA')\n",
    "axs[1,0].set_xlabel('Component 1')\n",
    "axs[1,0].set_ylabel('Component 2')\n",
    "\n",
    "\"\"\"\n",
    "\n",
    "patch1 = mpatches.Patch(color=colours[0], label='cluster0')\n",
    "patch2 = mpatches.Patch(color=colours[1], label='cluster1')\n",
    "patch3 = mpatches.Patch(color=colours[2], label='cluster2')\n",
    "patch4 = mpatches.Patch(color=colours[3], label='cluster3')\n",
    "plt.legend(handles=[patch1,patch2,patch3,patch4], loc=0)\n",
    "\n",
    "\"\"\"\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 530,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "      <th>Segment K-means PCA</th>\n",
       "      <th>Segment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-5.369299</td>\n",
       "      <td>-3.915794</td>\n",
       "      <td>-4.899712</td>\n",
       "      <td>2</td>\n",
       "      <td>third</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-5.369299</td>\n",
       "      <td>-3.915794</td>\n",
       "      <td>-4.899712</td>\n",
       "      <td>2</td>\n",
       "      <td>third</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-5.369299</td>\n",
       "      <td>-3.915794</td>\n",
       "      <td>-4.899712</td>\n",
       "      <td>2</td>\n",
       "      <td>third</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-5.369299</td>\n",
       "      <td>-3.915794</td>\n",
       "      <td>-4.899712</td>\n",
       "      <td>2</td>\n",
       "      <td>third</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-5.394017</td>\n",
       "      <td>-4.052147</td>\n",
       "      <td>-3.909400</td>\n",
       "      <td>2</td>\n",
       "      <td>third</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          x         y         z  Segment K-means PCA Segment\n",
       "0 -5.369299 -3.915794 -4.899712                    2   third\n",
       "1 -5.369299 -3.915794 -4.899712                    2   third\n",
       "2 -5.369299 -3.915794 -4.899712                    2   third\n",
       "3 -5.369299 -3.915794 -4.899712                    2   third\n",
       "4 -5.394017 -4.052147 -3.909400                    2   third"
      ]
     },
     "execution_count": 530,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_df['Segment K-means PCA']=kmeans.labels_\n",
    "pca_df['Segment'] = pca_df['Segment K-means PCA'].map({0:'first', 1:'second', 2:'third', 3:'fourth'})\n",
    "\n",
    "#fig, axs = plt.subplots(nrows=2, ncols=2, sharex=True)\n",
    "#fig.set_figheight(12)\n",
    "#fig.set_figwidth(18)\n",
    "#axs[0,0].scatter(x=pca_df.x, y=pca_df.y,c=kmeans.labels_, label=kmeans.labels_, s=2)\n",
    "#x_axis = axs[0,0].set_xlabel('Component 1')\n",
    "#y_axis = axs[0,0].set_ylabel('Component 2')\n",
    "\n",
    "#(x_axis, y_axis, hue = pca_df['Segment'], palette = ['g', 'r', 'c', 'm'])\n",
    "#plt.show\n",
    "pca_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 531,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "\n",
    "target=k_means_norm_values\n",
    "fig = plt.figure()\n",
    "ax = Axes3D(fig)\n",
    "ax.scatter(pca_df.x, pca_df.y, pca_df.z,c=target,label=target, s=2)\n",
    "ax.set_xlabel('Component 1')\n",
    "ax.set_ylabel('Component 2')\n",
    "ax.set_zlabel('Component 3')\n",
    "plt.title('Normalised k-means PCA with 3 dimensions')\n",
    "plt.legend(handles=[patch1,patch2,patch3,patch4], loc=0)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6. Feature Importance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once that we have segmented our initial parameters, we would like to analyse what makes each cluster unique. This will help us to understand which initial combinations fit better."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 532,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = MinMaxScaler()\n",
    "df_scaled = pd.DataFrame(scaler.fit_transform(df_X))\n",
    "df_scaled.columns = df_X.columns\n",
    "df_scaled['normalized_kmeans'] = normalized_kmeans.labels_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this purpose, we will plot the variables we have an interpret the results we have in each clusters by 2 approaches."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 6.2. Variance Approach "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 533,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>normalized_kmeans</th>\n",
       "      <th>Layer</th>\n",
       "      <th>Spacing</th>\n",
       "      <th>Speed</th>\n",
       "      <th>Pressure</th>\n",
       "      <th>Viscosity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.354520</td>\n",
       "      <td>0.640648</td>\n",
       "      <td>0.028142</td>\n",
       "      <td>0.556769</td>\n",
       "      <td>0.756914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.797653</td>\n",
       "      <td>0.761853</td>\n",
       "      <td>0.140086</td>\n",
       "      <td>0.289332</td>\n",
       "      <td>0.053879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>0.464613</td>\n",
       "      <td>0.728548</td>\n",
       "      <td>0.742574</td>\n",
       "      <td>0.155941</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.250828</td>\n",
       "      <td>0.761518</td>\n",
       "      <td>0.252484</td>\n",
       "      <td>0.260840</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   normalized_kmeans     Layer   Spacing     Speed  Pressure  Viscosity\n",
       "0                  0  0.354520  0.640648  0.028142  0.556769   0.756914\n",
       "1                  1  0.797653  0.761853  0.140086  0.289332   0.053879\n",
       "2                  2  0.464613  0.728548  0.742574  0.155941   0.000000\n",
       "3                  3  0.250828  0.761518  0.252484  0.260840   0.000000"
      ]
     },
     "execution_count": 533,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_mean = df_scaled.loc[df_scaled.normalized_kmeans!=-1, :].groupby('normalized_kmeans').mean().reset_index()\n",
    "df_mean"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Normalised the initial combinations, to avoid outliers numbers, and plot them by each cluster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 534,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['#a6cee3', '#1f78b4', '#b2df8a', '#33a02c', '#fb9a99', '#e31a1c', '#fdbf6f', '#ff7f00', '#cab2d6', '#6a3d9a', '#ffff99', '#b15928']\n"
     ]
    }
   ],
   "source": [
    "pal = sns.color_palette(\"Paired\")\n",
    "print(pal.as_hex())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 535,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Setting all variables between 0 and 1 in order to better visualize the results\n",
    "\n",
    "colors = {'Viscosity': \"#a6cee3\", 'Speed': \"#1f78b4\", 'Pressure': \"#b2df8a\", 'Layer': '#33a02c', 'Spacing':'#fb9a99' }\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "df_scaled = pd.DataFrame(scaler.fit_transform(df_X))\n",
    "df_scaled.columns = df_X.columns\n",
    "df_scaled['normalized_kmeans'] = normalized_kmeans.labels_\n",
    "\n",
    "# Calculate variables with largest differences (by standard deviation)\n",
    "# The higher the standard deviation in a variable based on average values for each cluster\n",
    "# The more likely that the variable is important when creating the cluster\n",
    "df_mean = df_scaled.loc[df_scaled.normalized_kmeans!=-1, :].groupby('normalized_kmeans').mean().reset_index()\n",
    "results = pd.DataFrame(columns=['Variable', 'Std'])\n",
    "for column in df_mean.columns[1:]:\n",
    "    results.loc[len(results), :] = [column, np.std(df_mean[column])]\n",
    "selected_columns = list(results.sort_values('Std', ascending=False).head(7).Variable.values) + ['normalized_kmeans']\n",
    "\n",
    "# Plot data\n",
    "tidy = df_scaled[selected_columns].melt(id_vars='normalized_kmeans')\n",
    "fig, ax = plt.subplots(figsize=(15, 5))\n",
    "sns.barplot(x='normalized_kmeans', y='value', hue='variable', data=tidy, palette=colors)\n",
    "plt.legend(loc='upper right')\n",
    "plt.savefig(\"normalized_kmeans_results.jpg\", dpi=300)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 6.2. Random Forest Approach "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we use the clusters as a target variable and then apply Random forest to understand which features are important in the generation of the clusters. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 536,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "y = normalized_kmeans.labels_\n",
    "X = df_X#.iloc[:,:]\n",
    "clf = RandomForestClassifier(n_estimators=100).fit(X, y)\n",
    "selected_columns = list(pd.DataFrame(np.array([clf.feature_importances_, df_X.columns]).T, columns=['Importance', 'Feature'])\n",
    "           .sort_values(\"Importance\", ascending=False)\n",
    "           .head(7)\n",
    "           .Feature\n",
    "           .values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 537,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA3gAAAE+CAYAAADf8LIWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAAAuDUlEQVR4nO3de5hWdb3//+db8AACKge/qIjwLbJIEeLgCRBMSN0eysMPrCSPpIWK9XO02rqtbd+KrHZ5iNyp6N6Wh20kqaVmeGJjAYqk9jUJDww6BSgKqBzf3z/mlj2Mgw7MLG7mnufjuua677XWZ33Wa811zcX15vNZnxWZiSRJkiSp5duu3AEkSZIkSc3DAk+SJEmSKoQFniRJkiRVCAs8SZIkSaoQFniSJEmSVCEs8CRJkiSpQrQtd4DN1bVr1+zVq1e5Y0iSJElSWcyZM2dJZnZr6FiLK/B69erF7Nmzyx1DkiRJksoiIl7a1DGnaEqSJElShbDAkyRJkqQKYYEnSZIkSRWixT2DJ0mSJKnlWLNmDdXV1bzzzjvljtLi7LTTTvTo0YPtt9++0edY4EmSJEkqTHV1NR07dqRXr15ERLnjtBiZydKlS6murqZ3796NPs8pmpIkSZIK884779ClSxeLu80UEXTp0mWzRz4t8CRJkiQVyuJuy2zJ780CT5IkSVLF+/a3v83HP/5x+vXrR//+/fnjH/9Y2LVGjBhRtnd3+wyeJEmSpK1m4EU3N2t/c74/7gPbzJw5k7vvvpsnnniCHXfckSVLlrB69epmzbGtcARPkiRJUkV79dVX6dq1KzvuuCMAXbt2Zc8996RXr15cfPHFDBkyhCFDhjB//nwAFi9ezIknnsjgwYMZPHgwM2bMAGDlypWcccYZDB48mAEDBnDXXXcB8PbbbzN27Fj69evHmDFjePvtt8tzo1jgSdIGVVVVjBs3jqqqqnJHkSRJzWj06NEsXLiQj3zkI3zpS1/i4Ycf3nCsU6dO/OlPf2LChAlMnDgRgAsuuIALL7yQWbNmceedd3LWWWcBtdM8Dz/8cGbNmsX06dO56KKLWLlyJT/96U9p37498+bN4xvf+AZz5swpx20CBU/RjIgjgR8DbYCfZ+Z36x3fBfhPoGcpy5WZeWORmSRpU2pqali0aFG5Y0iSpGbWoUMH5syZw6OPPsr06dMZM2YM3/1ubWlyyimnbPi88MILAfj973/Ps88+u+H8N998k+XLl3P//fczbdo0rrzySqB2hdCXX36ZRx55hPPPPx+Afv360a9fv615exsprMCLiDbANcAooBqYFRHTMvPZOs2+DDybmcdGRDfguYi4JTMrc0KsJEmSpLJo06YNI0aMYMSIEey///7cdNNNwMYrVb77ff369cycOZN27dpt1Edmcuedd7Lvvvu+p/9tZaXQIqdoDgHmZ+aCUsF2K3B8vTYJdIza30YH4DVgbYGZJEmSJLUyzz33HM8///yG7blz57LPPvsAcNttt234PPjgg4HaKZ1XX331Ru0BPvWpT3HVVVeRmQA8+eSTAAwfPpxbbrkFgKeffpp58+YVe0Pvo8gCby9gYZ3t6tK+uq4GPga8AvwZuCAz1xeYSZIkSVIrs2LFCr7whS/Qt29f+vXrx7PPPsvll18OwKpVqzjwwAP58Y9/zI9+9CMAfvKTnzB79mz69etH3759mTx5MgCXXnopa9asoV+/fuy3335ceumlAJx77rmsWLGCfv36MWnSJIYMGVKW+wSId6vPZu844mTgU5l5Vmn7VGBIZp5Xp81JwKHAV4APAQ8AB2Tmm/X6Gg+MB+jZs+fAl156qZDMklq2kVcd2qTz44EdiJXbkTuvJ0dt2Uzx6efNaFIGSZIqzV/+8hc+9rGPlTtGg3r16sXs2bPp2rVruaNsUkO/v4iYk5mDGmpf5AheNbB3ne0e1I7U1XU68KusNR94Afho/Y4y87rMHJSZg7p161ZYYEmSJElqyYpcRXMW0CciegOLgLHAZ+u1eRn4JPBoRPwvYF9gQYGZVLCqqipqamro3r07kyZNKnccSZIkaZNefPHFckdodoUVeJm5NiImAPdR+5qEGzLzmYg4p3R8MvCvwJSI+DMQwMWZuaSoTCqey8xLkiRJ5VPoe/Ay817g3nr7Jtf5/gowusgMkiRJktRaFFrgSZK0pZzyLUkqt+rqatasWcP2229Pjx49yh2nUSzwJOld7ZNkPbQvZnVhbR6nfEuSym3NmjWsXr1lK2uXiwWeJJXkoWvKHUGSJBWgQ4cOrFixotwxtgoLPEmSJElbTVPfW1vftvQO2rVr19K2bXlLrCLfgydJkiRJ26Tf/OY3HHjggQwYMIAjjjiCv//976xfv54+ffqwePFiANavX8/o0aN57bXXWLx4MSeeeCKDBw9m8ODBzJhRW1hefvnljB8/ntGjRzNu3Lhy3hJggSdJkiSpFRo6dCiPP/44Tz75JGPHjmXSpElst912fP7zn+eWW24BYMaMGey777507tyZCy64gAsvvJBZs2Zx5513ctZZZ23oa86cOdx111384he/KNftbOAUTUmSJEmtTnV1NWPGjOHVV19l9erV9O7dG4AzzjiD448/nokTJ3LHHXdwwgknAPD73/+eZ599dsP5b775JsuXLwfguOOOo127dlv/JhpggSdJKsSyXzbtfzHXl/7RXL98eZP62vWUzzYpR0vgKyUkqWFrly5t8DvAhHPOYeK553LsUUfx8GOP8a1Jk1i7dCl7tG/P7p0788DUqcydO5fvfe975Lp1rF+3jkfvvnvjQm71ata/9RYddt75Pf2/q22XLoXc26ZY4GkjU+fMb9L5K1at2fDZlL4+M/DDTcohSa2Jr5SQpM33xvLl7LnHHgDcfNttGx074/Of5wvnnsuxxx1HmzZtABg1YgTX/vznfPW88wCY++c/03///bdu6EbwGTxJkqQKVFVVxbhx46iqqip3FKns3nrrLXrtv/+Gnx9dey2XXXQRp5x5JiOOOYaunTtv1P7YI49kxcqVnHTiiRv2/eg732HO3LkMGD6cfoccwnVTpmzlu2gcR/AkSZIqkCO72laV47UGq0urYtZ33NFHN7j/qaefpt9++/GhD32INevWAdC1Sxd+cf3172l72cUXN1/QZmCBJ0mSJEklk378Y352443cNHlyuaNsEadoSpIkSVJJ1QUX8Le5cxl60EHljrJFHMGTJG2Tdu/YYaPPSjfwopu3+NyOS5bTBnh5yfIm9TPn++V/Qa8kqWks8CRJ26TLjjqq3BEkSWpxLPAkSZIkqQHbt9luo8+WwAJPkiRJkhqwR6ddyh1hs7WcUlSSJEmSNtMnjzuO+//wh432/XjyZD4ycCCTfvzjQq/9sxtv5Oaba5+NnjJlCq+88kqh1wNH8CRJkrZZy375iy0+d/3y5Rs+m9LPrqd8dovPlRoydc78Zu3vMwM//L7Hx5xwArdNncroww/fsO/2qVO54eqrGXrwwc2apb4vnn46bbt0AWoLvP32248999yz0Gs6gidJUgu3foedWbdjJ9bvsHO5o0jSNufE447j3vvvZ9WqVQC8+PLLvFpTw/wXXuD80kvK/+uu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8fOf/IS2bduyPhOAd1at2vhadUbnMpM777yTfffdt5nu8H/4DJ5UkJqaGhYtWkRNTU25o0iSJOkDjBo5kp/deCNr1qwB4K/z57Ny5UpeWriQ3bt146xx4zj9c5/jyXnzWLJ0KeszOeHYY7n8a1/jyXnzANhn7715Yu5cAO6cNm2T1/rUpz7FVVddRZaKwSdLz+01B0fwJEmSJLV6Z556Ki8tXMjgww+HTLp26cKd//EfPDxjBj+8+mrabr89HXbemRuvuYZFr77KWeedt2G07tv//M8AfGXCBE4580xuueMORg4btslrXXrppUycOJF+/fqRmfTq1Yu77767We7DAk+SJEnSVtOY1xo0t2UvvfSefYcNHcphQ4du2N5uu+244p//mStKxdq7xo0dy7ixY99z/qzp09+z76N9+vDkI49s2P7W178OwGmnncZpp522YX+7du342c9+ttn30RhO0ZQkSZKkCmGBJ0mSJEkVwgJPkiRJkiqEBZ4kSZIkVQgLPEmSJEmqEK6iKW3Csl/+oknnr1++fMNnU/ra9ZTPNimHJEmSWg9H8CRJkiRVvO/88IcccOihDBg+nIEjRvDHOXOare9jx45l2RtvNFt/TeEIniRJkqStpqmzpOprzGynmbNmcc/99/OnP/yBHXfckSVLl7J69epmy/CbW29ttr6ayhE8SZIkSRWt5u9/p2vnzuy4444AdO3ShT332IMPDxjA1775TQ4eNYqDR41i/oIFANz9u99xyOjRDBo5kk+dcAJ//8c/AFixYgVnnnce/YcNY8Dw4fzqN78B4MMDBrBk6VJefPll9j/4YL44cSIHHHooR510Em+//TYAs2bNol+/fhx88MFcdNFF7LfffoXcqwWeJEmSpIo2asQIFr7yCn2HDGHCRRfxyIwZG4516tiRmQ88wJfOOouvfuMbABx60EHMuO8+Zk+fzv/3mc9w5VVXAfDtH/yAXTp1Yu6jj/LkI48wctiw91zr+QULOPfMM3lqxgx23WUX7rzzTgBOP/10Jk+ezMyZM2nTpk1h92qBJ0mSJKmidejQgT89+CA//eEP6dalC589+2xu+uUvARhzwgkAjD3hBB6fPRuA6lde4eiTT6b/sGH88Oqrefa55wB48OGHOfeMMzb0u9uuu77nWr179qT//vsD8IkDDuDFF19k2bJlLF++nEMOOQSAz362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\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot data\n",
    "tidy = df_scaled[selected_columns+['normalized_kmeans']].melt(id_vars='normalized_kmeans')\n",
    "fig, ax = plt.subplots(figsize=(15, 5))\n",
    "sns.barplot(x='normalized_kmeans', y='value', hue='variable', data=tidy, palette=colors)\n",
    "plt.legend(loc='upper right')\n",
    "plt.savefig('randomforest.jpg', dpi=300)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We got similar result with both approaches. By this way, we can clearly analyse suitable combinations of each initial parameters to get the best performance of 'Material_precision. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
